Write-up for PA4
----------------

1. Explain design decisions, explain why your code is correct, and
	why your test cases are adequate.

This was a much more complex assignment than previous ones. In this explaination
I will be be discussing four design decisions made by my semantic analyzer:

	SECTION 1- General overview of passes and their purposes
	SECTION 2- Correctness of inheritance checking
	SECTION 3- Correctness of type checking
	SECTION 4- Correctness of scoping

+-------------------------------------------------------------------------------+
| SECTION 1- GENERAL OVERVIEW OF PASSES AND THEIR PURPOSES						|
+-------------------------------------------------------------------------------+

=> 1.A. Passes:

My semantic analyzer makes FIVE passes over the AST generated by the parser. A 
pass is defined as a complete iteration and processing over all the classes. The
five passes perform the following functions.

	1. Record the names of the classes in a disconnected graph
	2. Record inheritance by creating edges between classes and their parent in
	   the graph
	3. Check the graph for cycles (and therefore circular inheritance, which is
	   not allowed by Cool)
	4. Populate each class's method and attribute table with their methods and
	   attributes, their declared type (or return type), and for methods, the 
	   types of their formals
	5. Perform recurssive semantic analysis on the expression in the features'
	   initializer / body.

It is worth mentioning that the basic classes were prepended to the user class
list before passes 1 - 3 and a separate pass (i.e. 3.5) occurs between passes 3
and 4. This pass only went over the basic classes and added their methods and
attributes to the class graph structure to be used during the inheritance process.

+-------------------------------------------------------------------------------+
| SECTION 2- CORRECTNESS OF INHERITANCE CHECKING								|
+-------------------------------------------------------------------------------+

=> 2.A. Methodology of Inheritance checking

Inheritance in Cool is singular and cannot be circular. All classes are descedents
of Object. To ensure that the inheritance properties of the language were mainta-
ined, the classes were organized into a singularly directed graph in passes 1 and
2. The edge is directed from the child class to the parent using a pointer. 
The class ClassTable::InheritanceGraph is the container for the graph, which the 
member class Node contained each node of the graph (in this case the class by 
Symbol name).

To ensure that there were no circular inheritances, each class was iterated and 
followed upwards to the Object class. As the graph is traversed, each node is 
added to a list. If a node is encountered which is in the list (and hence already
traversed), a cycle is found an an error returned.

=> 2.B. Possible errors during this step

Aside from circular reference, the following errors are checked for during the 
first three passes:
	- Users cannot redefined the basic classes (Object, IO, String, Bool, Int)
	- User classes cannot inherit from String, Bool, or Int
	- User classes cannot inherit from undefined classes
	- User classes cannot be defined more than once

As classes may inherit from classes that have not yet been declared, the first
pass is used to indiscriminately add classes to the inheritance graph before
inheritance is checked.

=> 2.C. Error recovery

All errors generated during this step halt semantic analysis.

+-------------------------------------------------------------------------------+
| SECTION 3- CORRECTNESS OF TYPE CHECKING										|
+-------------------------------------------------------------------------------+

=> 3.A. Valid Types in Cool

A valid type in Cool is any class that has been defined by the user OR any of the 
five basic classes. As the inheritance graph contains all the user defined classes
and basic classes, simply querying a type symbol against the inheritance graph 
can be used to determine if a type is valid or not.

=> 3.B. Checking Expression Types

The AST provided by the parser does NOT have types defined for expressions. There-
fore, and important role of the semantic analyzer is inferring types for 
expressions. After each expression undergoes semantic analysis, it's type is 
determined. Each sub-class of expression has different rules for determining its
static type:
	- Constants (bool, int, string) are types according to their parsed type
	- isvoid(expr) is typed as a Bool
	- identifiers (i.e. objects) are typed according to their declared type
	- new TYPE are typed according to TYPE. If TYPE is not a valid type, it is 
	  typed as Object
	- Comparison operators (<, <=, =) and the compliment operator (not) are typed 
	  as Bool
	- Arithmetic operators (+, -, /, *) and the negation operator (-) are typed 
	  as Int
	- let statements are assigned the type of its body expression. As let 
	  statements are recurssive, the type assignment is the type of the inner most
	  body expression
	- loop statements are typed as Object
	- block expressions are assigned the type of its last expression
	- case statements are assigned the lowest common type (i.e. JOIN) of all its 
	  branches
	- conditional statements are assigned the lowest common type (i.e. JOIN) of 
	  all its branches
	- assignment expressions are assigned the type of its expression (NOT of the
	  object being assigned to)
	- dispatch statements are assigned the return type of the function being 
	  dispatched (if the dispatched function is not known, its its assigned the 
	  type of Object).

=> 3.C. Tracking Types of Objects

Object types are tracked in a symbol table according to scope. This is further 
discussed in Section 4.

=> 3.D. Typing and Inheritance

Cool allows for descendent types to match with ancestor types. In other words, 
if an expression requires a subexpression of type A and type B inherits from 
type A, the expression does not generate an error. The cool manual denotes this
relationship is A <= B. This behavior is seen in the following contexts:
	- Checking the declared types of attributes against the type of their initial-
	  izer
	- Checking the declared return type of method against the type of their 
	  expression body.
	- Checking the declared type of an object when being assigned to against the
	  type of the assignment expression
	- Checking the declared type of a local variable against the type of the 
	  assigned expression in an let statement
	- Checking the declared type of an argument against the type of the expression
	  provided in that argument's position during function dispatch

These checks use the inheritance graph built in passes 1 - 3 to ensure that two 
classes are compatible in the above circumstances.

Since Int, String, and Bool CANNOT be inheritted from, expressions that require 
those specific types as arguments (i.e. arithmetic and comparison operators) have
strict type requirements which will generate an error if not fulfilled.

=> 3.E. Errors

Potential errors involved during type checking
	- Assigning to self is illegal
	- Trying to pass an ancestor type into a context which requires a descendent type
	- Passing an unrelated type as an argument to an expression
	- Attempting to initialize an undefined type in a new statement, static dispatch,
	  or as an type declaration

=> 3.F. Error Recovery

As every expressions sub-class has a specific rule which dictates its static_type
(or defined an error/default static type), errors in sub-expressions can be 
reported then safely ignored as it does not invalidate the type of the parent 
expression which can then be propogated upwards in the recurssion, hiding errors
at lower levels.	

+-------------------------------------------------------------------------------+
| SECTION 4- CORRECTNESS OF SCOPING												|
+-------------------------------------------------------------------------------+

=> 4.A. Scope types

There are two "types" of scope maintained and checked by this semantic analyzer.
First, inheritance is treated as scope. For example, function a may be defined 
for class A and class B, but if class B inherits from class A, A:a is hidden from
the scope while within class B. the second form of scope is maintaining visibility
of object in class and local contexts. For example, if a is defined for class X, 
but a let expression also defined object a, then within the let expression (and
nowhere else) the class definition of a is hiddden from the scope.

=> 4.B. Class Inheritance Feature Scoping

Pass 4 is used to record the names and type information of features for the class
list. The nodes of the inheritance graph include two maps, one for attributes 
belonging to the class and one for methods belonging to the class. Pass 4 does four
things:
	- It skips a class node if its parent was not traversed already, and returns later
	  when it has been
	- It checks if an attribute has already been defined for an ancestor class (and
	  prodices an error if it has been as it is illegal to redefined attributes)
	- It checks if redefined methods have the same type between descendent and ancestor
	  classes (type referring to return type and formals type)
	- It checks for multiple definition of the same feature in the same class

If a feature meets those four checks it is added to its respective symbol table along
with its type(s). For functions, the types records are the return type and the types of
the formals, while for attributes, the declared type is stored. Inheritted methods and 
attributes that have NOT been redefined are not added to this symbol table. Instead, 
a graph traversal is used to validate if a method belongs to a type. Attribute inheritance
checking is described in section 4.C.

=> 4.C. Object Scoping

Object scoping refers to how objects are referred to in individual scopes. There are
two main scope levels in Cool:
	- class level scope
	- local scope

Class level scope is intiated when the class semantic analysis begins. During this 
time, a graph traversal is performed for the inheritance graph and all defined and 
inheritted attributes are added to the class level scope.

Local scope is further divided into two levels:
	- Function scope (which injects the formal method parameters into the scope,
	  potentially hiding objects at the class level with the same name)
	- Expression level scope (which injects local variables declared by a let or 
	  case expression, potentially hiding objects at the class, function, or even
	  expression level in the case of recursive expressions with the same name)
	
This scope is maintained using the built-in symbol table which automatically does
scope hiding.

=> 4.D. Errors

The following Errors relating to scoping are checked:
	- Reference to an object that does not exist in the current scope
	- Reference to a class method that has not been defined for that class or its 
	  ancestors
	- Overriding an inheritted function with different types
	- Overriding an inheritted attribute
	- Assigning an invalid type to an object

=> 4.E. Error Recovery

Static types of object need to be declared in their context. Therefore, even if
assignment results in an error due to type mismatch, the type of the object is known
and semantic analysis can continue.

Objects that are declared as a type that has is undefined are assigned the type Object.